<?php

/**
 * @file
 * Install file for the Commerce Abandoned Cart Notification module.
 */

/**
 * Implements hook_schema().
 */
function commerce_abandoned_cart_notification_schema() {
  return array(
    'commerce_abandoned_cart_notification' => array(
      'description' => 'A record of an abandoned shopping cart notification sent to a user.',
      'fields' => array(
        'order_id' => array(
          'description' => 'Order ID of the order for which this notification was sent.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'order_vid' => array(
          'description' => 'Order revision ID of the order revision that was current when this notification was sent.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'mid' => array(
          'description' => 'Message ID of the message sent for this order.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'config' => array(
          'description' => 'The id of the config that generated this message.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'indexes' => array(
        'order_id' => array('order_id', 'order_vid'),
        'mid' => array('mid'),
        'config' => array('config'),
      ),
    ),
    'commerce_abandoned_cart_notification_config' => array(
      'description' => 'A configuration for abandoned cart notifications.',
      'fields' => array(
        'id' => array(
          'description' => 'The configuration ID',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'delay' => array(
          'description' => 'The number of seconds after an order has been abandoned, after which this notification should be sent.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'message_type' => array(
          'description' => 'The {message_type}.name of the message type to send.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'active' => array(
          'description' => 'Boolean indicating whether this configuration is active.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
        ),
        'data' => array(
          'description' => 'Data related to this configuration.',
          'type' => 'blob',
          'size' => 'big',
          'not null' => FALSE,
          'serialize' => TRUE,
        ),
      ),
      'primary key' => array('id'),
      'indexes' => array(
        'delay' => array('delay'),
        'active' => array('active'),
      ),
    ),
  );
}

/**
 * Create the {commerce_abandoned_cart_notification} table.
 */
function commerce_abandoned_cart_notification_update_7000() {
  db_create_table('commerce_abandoned_cart_notification', array(
    'description' => 'A record of an abandoned shopping cart notification sent to a user.',
    'fields' => array(
      'id' => array(
        'description' => 'Notification ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'User ID of the user to whom this notification was sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'Order ID of the order for which this notification was sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'order_vid' => array(
        'description' => 'Order revision ID of the order revision that was current when this notification was sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when this notification was created.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the notification.',
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'order_id' => array('order_id', 'order_vid'),
      'notification_created' => array('created'),
      'uid' => array('uid'),
    ),
  ));
}

/**
 * Modify the {commerce_abandoned_cart_notification} table to only map mid's to
 * order_id's, and set up appropriate indexing.
 *
 * Note: This will delete your existing history of abandoned cart notifications!
 */
function commerce_abandoned_cart_notification_update_7001() {
  db_drop_index('commerce_abandoned_cart_notification', 'notification_created');
  db_drop_index('commerce_abandoned_cart_notification', 'uid');
  db_drop_field('commerce_abandoned_cart_notification', 'id');
  db_drop_field('commerce_abandoned_cart_notification', 'uid');
  db_drop_field('commerce_abandoned_cart_notification', 'created');
  db_drop_field('commerce_abandoned_cart_notification', 'data');
  db_add_field('commerce_abandoned_cart_notification', 'mid', array(
    'description' => 'Message ID of the message sent for this order.',
    'type' => 'int',
  ));
  db_add_index('commerce_abandoned_cart_notification', 'mid', array('mid'));
}

/**
 * Create the {commerce_abandoned_cart_notification_config} table. Make
 * {commerce_abandoned_cart_notification}.mid NOT NULL. Add a config reference
 * field to {commerce_abandoned_cart_notification} to indicate which config
 * generated the message.
 */
function commerce_abandoned_cart_notification_update_7002() {
  db_create_table('commerce_abandoned_cart_notification_config', array(
    'description' => 'A configuration for abandoned cart notifications.',
    'fields' => array(
      'id' => array(
        'description' => 'The configuration ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'delay' => array(
        'description' => 'The number of seconds after an order has been abandoned, after which this notification should be sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'message_type' => array(
        'description' => 'The {message_type}.name of the message type to send.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'active' => array(
        'description' => 'Boolean indicating whether this configuration is active.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'delay' => array('delay'),
      'active' => array('active'),
    ),
  ));

  // Before modifying the mid field, we have to drop the index on it. See the
  // documentation for db_change_field().
  db_drop_index('commerce_abandoned_cart_notification', 'mid');
  // We also have to set all of its NULL values to 0, so that there aren't any
  // errors when we set it to NOT NULL.
  db_update('commerce_abandoned_cart_notification')
    ->fields(array('mid' => 0))
    ->isNull('mid')
    ->execute();
  // Finally, change the field.
  db_change_field('commerce_abandoned_cart_notification', 'mid', 'mid', array(
    'description' => 'Message ID of the message sent for this order.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ), array('indexes' => array('mid' => array('mid'))));

  db_add_field('commerce_abandoned_cart_notification', 'config', array(
    'description' => 'The id of the config that generated this message.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ), array('indexes' => array('config' => array('config'))));
}

/**
 * Create the {commerce_abandoned_cart_notification_config}.data field.
 */
function commerce_abandoned_cart_notification_update_7003() {
  db_add_field('commerce_abandoned_cart_notification_config', 'data', array(
    'description' => 'Data related to this configuration.',
    'type' => 'blob',
    'size' => 'big',
    'not null' => FALSE,
    'serialize' => TRUE,
  ));
}

/**
 * Delete the previous default rules.
 *
 * This is necessary in case the rules have been overidden in the database and
 * thus remain even after updating the module.
 */
function commerce_abandoned_cart_notification_update_7004() {
  rules_config_delete(array(
    'rules_commerce_abandoned_cart_notification_cron',
    'rules_commerce_abandoned_cart_notifications_cron',
    'rules_notify_user_abandoned_cart',
  ));
}
